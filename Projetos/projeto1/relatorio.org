

#+begin_abstract
Nessa tarefa, buscamos analisar a Transformada Discreta de Fourier sem nenhuma aceleração. Criamos um programa que realiza a transformada e outro que realiza sua inversa.
Observamos que, para alguns casos, essas operações são bem comportadas, e conseguimos recuperar o sinal sem dificuldades.
Observamos também que, para outras sinais obtivemos um reflexo em torno da frequência de Nyquist, provando que a maior frequência que podemos obter com a transformada é $\frac{1}{2\Delta t}$.
Por fim, vimos a relação entre o número N de pontos e o tempo de 50 execuções do programa.
#+end_abstract
* Introdução
A transformada de Fourier é uma transformação que nos leva do espaço das amplitude de um sinal para um espaço de frequências. Para sinais contínuos, podemos escrever:

#+begin_latex
\label{eq:Transformada contínua}
\begin{equation}
Y(f) = \int^{\infty}_{-\infty}y(t)e^{2\pi f i t}
\end{equation}
#+end_latex

Porém, na física experimental, da análise da luminosidade de estrelas na busca de exoplanetas ao estudo do movimento de um pêndulo no laboratório de física I, trabalhamos essencialmente com dados discretos.

Para adequar a transformada aos dados laboratoriais, usamos as substituições $t_j = j\delta t$, $f_k = \frac{k}{N\delta t}$, que nos dão:

#+begin_latex
\label{eq:Transformada discreta}
\begin{equation}
Y_k = \sum_{j=0}^{j < N/2} y_j e^{2\pi jk i/N}
\end{equation}
#+end_latex
#+begin_latex
\label{eq:Transformada discreta}
\begin{equation}
y_j = \frac{1}{N}\sum_{k=0}^{k = N} Y_ke^{2\pi jk i/N}
\end{equation}
#+end_latex

* Notebook configuration :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:

This section is used for configuring various settings in the notebook appearance as well as defining various options for the export in HTML or PDF formats. You can change any of these settings.
** Document information
:PROPERTIES:
:VISIBILITY: folded
:END:

#+TITLE:        [[https://edisciplinas.usp.br/pluginfile.php/7581904/mod_resource/content/1/projeto-fiscompII-primeiro-2023-completo.pdf][ANÁLISE ESPECTRAL POR TRANSFORMADAS DE FOURIER]]
#+SUBTITLE:     Edgard Macena Cabral Nº 11820833 — Março 2023
#+AUTHOR:       Edgard Macena Cabral
#+EMAIL:        edgardmacena@usp.br
#+DATE:         Março 2023
#+DESCRIPTION:  A GNU Emacs notebook demonstration
#+OPTIONS:      toc:nil



** HTML export configuration
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_export html
#+end_export

#+OPTIONS:   num:nil
#+OPTIONS:   html-style:nil
#+OPTIONS:   html-scripts:nil
#+OPTIONS:   html-postamble:nil
#+OPTIONS:   broken-links:mark
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../notebook.css" />

** PDF export configuration
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_export PDF
#+end_export

#+OPTIONS:

** Code snippets
:PROPERTIES:
:VISIBILITY: folded
:END:

*** Notebook setup :lisp:

#+name: setup
#+header:
#+begin_src emacs-lisp :results none :exports none :eval no-export
(setq org-cite-csl-styles-dir ".")
(setq org-babel-python-command "/opt/anaconda3/bin/python")
(require 'ob-python)
(require 'oc-csl)
nil
#+end_src

*** Notebook run :lisp:

#+name: run
#+header: :var scope="all"
#+begin_src emacs-lisp :results none :exports none :eval never
(org-babel-execute-buffer)
nil
#+end_src

*** Notebook export :lisp:

#+name: export
#+header: :var target="html"
#+begin_src emacs-lisp :results none :exports none :eval never
(cond (((string= target "html")   (org-html-export-to-html))
       ((string= target "pdf")    (org-latex-export-to-pdf))
       ((string= target "tex")    (org-latex-export-to-latex))
       ((string= target "latex")  (org-latex-export-to-latex))
       (t  (message (format "Unknow backend (%s) for export" target)))))
#+end_src

*** Notebook information :lisp:

#+name: document-info
#+header: :var python=python-version emacs=emacs-version org=org-version
#+begin_src python :results raw :exports results
return f"{emacs}, {org} & {python}"
#+end_src
#+RESULTS: document-info

*** Emacs version :lisp:

#+name: emacs-version
#+begin_src emacs-lisp :export none :results raw
(format "[[https://www.gnu.org/software/emacs/][Emacs]] %d.%d"
        emacs-major-version emacs-minor-version)
#+end_src
#+RESULTS: emacs-version

*** Org mode version :lisp:

#+name: org-version
#+begin_src emacs-lisp :export none :results raw
(format "[[https://www.gnu.org/software/emacs/][Org mode]] %s"
        (org-version nil nil))
#+end_src
#+RESULTS: org-version

*** Python version :python:

#+name: python-version
#+begin_src python :export none :results raw
import platform
version = platform.python_version()
return f"[[https://www.python.org/][Python]] {version}"
#+end_src

*** Matplotlib figure preparation :python:

#+name: pyfig-pre
#+header: :var width=8 height=1
#+begin_src python :results file :exports none
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig = plt.figure(figsize=(width,height))
ax = fig.add_axes([0,0,1,1], frameon=False)
ax.axis("off")
#+end_src

*** Matplotlib figure finalization :python:

#+name: pyfig-post
#+header: :var filename=""
#+begin_src python :results file :exports none
if filename:
    plt.savefig(filename, dpi=300)
    return filename
return ""
#+end_src

#+RESULTS: pyfig-post
[[file:]]
